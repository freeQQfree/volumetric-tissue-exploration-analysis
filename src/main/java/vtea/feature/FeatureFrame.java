/*
 * Copyright (C) 2018 SciJava
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package vtea.feature;

import vtea.feature.listeners.RepaintFeatureListener;
import vtea.protocol.listeners.RebuildPanelListener;
import vtea.protocol.blockstepgui.FeatureStepBlockGUI;
import vtea.protocol.listeners.UpdateProgressListener;
import ij.ImagePlus;
import java.awt.Color;
import java.awt.GridLayout;
import java.util.ArrayList;
import java.util.ListIterator;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.List;
import vtea.protocol.listeners.DeleteBlockListener;

/**
 *
 * @author drewmcnutt
 */
public class FeatureFrame extends javax.swing.JFrame implements PropertyChangeListener, UpdateProgressListener, RebuildPanelListener, DeleteBlockListener, RepaintFeatureListener{
    
    protected ArrayList<FeatureStepBlockGUI> FeatureStepsList;
    ArrayList availabledata;
    List plotvalues;
    
    protected GridLayout FeatureLayout = new GridLayout(4, 1, 0, 0);
    /**
     * Creates new form FeatureFrame
     */
    public FeatureFrame(ArrayList AvailableData, List plotvalues) {
        this.availabledata = AvailableData;
        this.plotvalues = plotvalues;
                
        this.FeatureStepsList = new ArrayList<FeatureStepBlockGUI>();
        initComponents();
        FeatureStepsPanel.setLayout(FeatureLayout);
        //addFeaturePanel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        FeatureAnalysis = new javax.swing.JPanel();
        Feature_Header = new javax.swing.JPanel();
        AnalyzeDataText = new javax.swing.JLabel();
        FeatureLabel = new javax.swing.JLabel();
        AddStep = new javax.swing.JButton();
        DeleteAllSteps = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        exploreText = new javax.swing.JLabel();
        Feature_Panel = new javax.swing.JPanel();
        FeatureStepsPanel = new javax.swing.JPanel();
        FeatureGo = new javax.swing.JButton();
        ProgressPanel = new javax.swing.JPanel();
        ProgressComment = new javax.swing.JLabel();
        VTEAProgressBar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(380, 360));
        setMinimumSize(new java.awt.Dimension(380, 360));
        setPreferredSize(new java.awt.Dimension(380, 410));
        setResizable(false);
        setSize(new java.awt.Dimension(30, 381));
        getContentPane().setLayout(new java.awt.FlowLayout());

        jPanel1.setMaximumSize(new java.awt.Dimension(445, 381));
        jPanel1.setMinimumSize(new java.awt.Dimension(445, 381));
        jPanel1.setPreferredSize(new java.awt.Dimension(380, 381));
        jPanel1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jPanel1formKeyPressed(evt);
            }
        });
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));

        FeatureAnalysis.setMaximumSize(new java.awt.Dimension(750, 353));
        FeatureAnalysis.setMinimumSize(new java.awt.Dimension(750, 353));
        FeatureAnalysis.setLayout(new java.awt.GridBagLayout());

        Feature_Header.setBackground(new java.awt.Color(204, 204, 204));
        Feature_Header.setForeground(new java.awt.Color(102, 102, 102));
        Feature_Header.setAlignmentX(0.0F);
        Feature_Header.setAlignmentY(0.0F);
        Feature_Header.setMaximumSize(new java.awt.Dimension(440, 36));
        Feature_Header.setMinimumSize(new java.awt.Dimension(440, 36));
        Feature_Header.setPreferredSize(new java.awt.Dimension(440, 36));
        Feature_Header.setLayout(new java.awt.GridBagLayout());

        AnalyzeDataText.setText("Analyze Data...");
        AnalyzeDataText.setMaximumSize(new java.awt.Dimension(120, 16));
        AnalyzeDataText.setMinimumSize(new java.awt.Dimension(100, 16));
        AnalyzeDataText.setPreferredSize(new java.awt.Dimension(100, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        Feature_Header.add(AnalyzeDataText, gridBagConstraints);

        FeatureLabel.setBackground(new java.awt.Color(0, 0, 0));
        FeatureLabel.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        FeatureLabel.setText("Feature");
        FeatureLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        FeatureLabel.setMaximumSize(new java.awt.Dimension(150, 28));
        FeatureLabel.setMinimumSize(new java.awt.Dimension(150, 28));
        FeatureLabel.setPreferredSize(new java.awt.Dimension(90, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        Feature_Header.add(FeatureLabel, gridBagConstraints);

        AddStep.setBackground(new java.awt.Color(204, 204, 204));
        AddStep.setForeground(new java.awt.Color(102, 102, 102));
        AddStep.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/list-add-3 2.png"))); // NOI18N
        AddStep.setToolTipText("Add an analysis method.");
        AddStep.setMaximumSize(new java.awt.Dimension(34, 34));
        AddStep.setMinimumSize(new java.awt.Dimension(34, 34));
        AddStep.setPreferredSize(new java.awt.Dimension(34, 34));
        AddStep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddStepActionPerformed(evt);
            }
        });
        Feature_Header.add(AddStep, new java.awt.GridBagConstraints());

        DeleteAllSteps.setBackground(new java.awt.Color(204, 204, 204));
        DeleteAllSteps.setForeground(new java.awt.Color(102, 102, 102));
        DeleteAllSteps.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/edit-clear-list_24.png"))); // NOI18N
        DeleteAllSteps.setToolTipText("Delete all analysis methods.");
        DeleteAllSteps.setEnabled(false);
        DeleteAllSteps.setMaximumSize(new java.awt.Dimension(34, 34));
        DeleteAllSteps.setMinimumSize(new java.awt.Dimension(34, 34));
        DeleteAllSteps.setPreferredSize(new java.awt.Dimension(34, 34));
        DeleteAllSteps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteAllStepsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        Feature_Header.add(DeleteAllSteps, gridBagConstraints);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        Feature_Header.add(jPanel2, new java.awt.GridBagConstraints());

        exploreText.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        exploreText.setForeground(new java.awt.Color(153, 153, 153));
        exploreText.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        exploreText.setText("...explore");
        exploreText.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        exploreText.setPreferredSize(new java.awt.Dimension(85, 40));
        exploreText.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Feature_Header.add(exploreText, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 7;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        FeatureAnalysis.add(Feature_Header, gridBagConstraints);

        Feature_Panel.setBackground(new java.awt.Color(204, 204, 204));
        Feature_Panel.setForeground(new java.awt.Color(102, 102, 102));
        Feature_Panel.setAlignmentX(0.0F);
        Feature_Panel.setAlignmentY(0.0F);
        Feature_Panel.setMaximumSize(new java.awt.Dimension(440, 360));
        Feature_Panel.setMinimumSize(new java.awt.Dimension(440, 360));
        Feature_Panel.setPreferredSize(new java.awt.Dimension(440, 300));
        Feature_Panel.setRequestFocusEnabled(false);

        FeatureStepsPanel.setBackground(vtea._vtea.ACTIONPANELBACKGROUND);
        FeatureStepsPanel.setPreferredSize(new java.awt.Dimension(160, 245));

        javax.swing.GroupLayout FeatureStepsPanelLayout = new javax.swing.GroupLayout(FeatureStepsPanel);
        FeatureStepsPanel.setLayout(FeatureStepsPanelLayout);
        FeatureStepsPanelLayout.setHorizontalGroup(
            FeatureStepsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 360, Short.MAX_VALUE)
        );
        FeatureStepsPanelLayout.setVerticalGroup(
            FeatureStepsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 245, Short.MAX_VALUE)
        );

        FeatureGo.setBackground(vtea._vtea.BUTTONBACKGROUND);
        FeatureGo.setText("Find Features");
        FeatureGo.setToolTipText("Find segmented objects.");
        FeatureGo.setEnabled(false);
        FeatureGo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FeatureGoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Feature_PanelLayout = new javax.swing.GroupLayout(Feature_Panel);
        Feature_Panel.setLayout(Feature_PanelLayout);
        Feature_PanelLayout.setHorizontalGroup(
            Feature_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Feature_PanelLayout.createSequentialGroup()
                .addGroup(Feature_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Feature_PanelLayout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(FeatureGo, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(Feature_PanelLayout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(FeatureStepsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        Feature_PanelLayout.setVerticalGroup(
            Feature_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Feature_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(FeatureStepsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(FeatureGo)
                .addContainerGap(68, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 0);
        FeatureAnalysis.add(Feature_Panel, gridBagConstraints);

        jPanel1.add(FeatureAnalysis);

        ProgressPanel.setMaximumSize(new java.awt.Dimension(380, 30));
        ProgressPanel.setMinimumSize(new java.awt.Dimension(380, 30));
        ProgressPanel.setPreferredSize(new java.awt.Dimension(380, 30));
        ProgressPanel.setRequestFocusEnabled(false);
        java.awt.FlowLayout flowLayout1 = new java.awt.FlowLayout(java.awt.FlowLayout.TRAILING, 1, 1);
        flowLayout1.setAlignOnBaseline(true);
        ProgressPanel.setLayout(flowLayout1);

        ProgressComment.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        ProgressPanel.add(ProgressComment);

        VTEAProgressBar.setPreferredSize(new java.awt.Dimension(200, 20));
        ProgressPanel.add(VTEAProgressBar);

        jPanel1.add(ProgressPanel);

        getContentPane().add(jPanel1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AddStepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddStepActionPerformed
        //this.setVisible(false);
        FeatureStepBlockGUI block = new FeatureStepBlockGUI("Feature Step", "", Color.LIGHT_GRAY,FeatureStepsList.size() + 1, availabledata, plotvalues);
        block.addDeleteBlockListener(this);
        block.addRebuildPanelListener(this);
        //this.notifyRepaintFeatureListeners();

        FeatureStepsPanel.add(block.getPanel());
        FeatureStepsPanel.repaint();
        //this.repaint();
        FeatureStepsList.add(block);

        if (FeatureStepsList.size() <= 2) {
            AddStep.setEnabled(true);
        }
        if (FeatureStepsList.size() >= 4) {
            AddStep.setEnabled(false);
        }
        if (!FeatureStepsList.isEmpty()){
            DeleteAllSteps.setEnabled(true);
        }
        repaintFeature();
        this.setVisible(true);
        
        FeatureGo.setEnabled(true);
    }//GEN-LAST:event_AddStepActionPerformed

    private void DeleteAllStepsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteAllStepsActionPerformed
        FeatureStepsList.clear();
        FeatureStepsPanel.removeAll();
        AddStep.setEnabled(true);
        DeleteAllSteps.setEnabled(false);
        FeatureGo.setEnabled(false);
        FeatureStepsPanel.repaint();
        //pack();
    }//GEN-LAST:event_DeleteAllStepsActionPerformed

    private void FeatureGoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FeatureGoActionPerformed

        new Thread(new Runnable() {
            public void run() {
                VTEAProgressBar.setIndeterminate(true);
                FeatureGo.setEnabled(false);
                VTEAProgressBar.setIndeterminate(false);
                // Runs inside of the Swing UI thread
                //          SwingUtilities.invokeLater(new Runnable() {
                    //            public void run() {
                        //                for(int i = 0; i < 100; i++){
                            //
                            //              ObjectProcess.setValue(i);
                            //                ObjectProcess.updateUI();}
                        //            }
                    //          });

            try {
                java.lang.Thread.sleep(100);
            }
            catch(Exception e) { }
        }
        }).start();
    }//GEN-LAST:event_FeatureGoActionPerformed

    private void jPanel1formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPanel1formKeyPressed

    }//GEN-LAST:event_jPanel1formKeyPressed

    
    @Override
    public void rebuildPanel(int type) {
        this.RebuildPanelFeature();
    }

    @Override
    public void deleteBlock(int type, int position) {
        this.deleteFeatureStep(position);
        if (FeatureStepsList.isEmpty()){
            FeatureGo.setEnabled(false);
        }
    }

    @Override
    public void changeProgress(String text, int min, int max, int position) {      
        VTEAProgressBar.setMinimum(min);
        VTEAProgressBar.setMaximum(max);
        VTEAProgressBar.setValue(position);
        ProgressComment.setText(text);    
    }
    @Override
    public void propertyChange(PropertyChangeEvent evt) {

        if (evt.getPropertyName().equals("progress")) {
            int progress = (Integer) evt.getNewValue();
            VTEAProgressBar.setValue(progress);
            ProgressComment.setText(String.format(
                    "Completed %d%%...\n", progress));
        } 
        if (evt.getPropertyName().equals("comment")){
            ProgressComment.setText((String)evt.getNewValue());
        }
        if (evt.getPropertyName().equals("escape") && (Boolean)evt.getNewValue()){
            
            ImagePlus ProcessedShow = new ImagePlus("Processed");
            //ProcessedShow = UtilityMethods.makeThumbnail(ProcessedImage);
            ProcessedShow.setTitle(this.getName() + "_Processed");

            ProgressComment.setText("Processing complete...");
            ProcessedShow.show();
            

            /*
            if(ObjectStepsList.size() > 0){
                me.FolderDrawer.clear(); 
                me.ExploreDrawer.clear(); 
                notifyUpdatedImageListeners(ProcessedImage); 
            }
            */
        }
        if ("escape" == evt.getPropertyName() && !(Boolean)evt.getNewValue()){
           
            
         System.out.println("PROFILING: Error is processing, thread terminated early...");
           
        }
    }

    @Override
    public void repaintFeature(){
        this.repaint();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddStep;
    private javax.swing.JLabel AnalyzeDataText;
    private javax.swing.JButton DeleteAllSteps;
    private javax.swing.JPanel FeatureAnalysis;
    public javax.swing.JButton FeatureGo;
    private javax.swing.JLabel FeatureLabel;
    public javax.swing.JPanel FeatureStepsPanel;
    private javax.swing.JPanel Feature_Header;
    private javax.swing.JPanel Feature_Panel;
    public javax.swing.JLabel ProgressComment;
    private javax.swing.JPanel ProgressPanel;
    public javax.swing.JProgressBar VTEAProgressBar;
    private javax.swing.JLabel exploreText;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
    public void RebuildPanelFeature() {
        FeatureStepBlockGUI sb;
        ListIterator litr = FeatureStepsList.listIterator();
        while (litr.hasNext()) {
            sb = (FeatureStepBlockGUI) litr.next();
            sb.setPosition(FeatureStepsList.indexOf(sb) + 1);
            FeatureStepsPanel.add(sb.getPanel());   
        }
    }
    
    public void UpdatePositionFeature(int position) {
        FeatureStepBlockGUI sb;
            for (int i = 1; i < FeatureStepsList.size(); i++) {
                sb = (FeatureStepBlockGUI) FeatureStepsList.get(i);
                sb.setPosition(i);
                FeatureStepsList.set(i, sb);
            }
    }
    
    private void executeFeatures() {
        
        ProgressComment.setText("Finding Features...");

        ArrayList<ArrayList> protocol = new ArrayList<>();

        //get the arraylist, decide the nubmer of steps, by .steps to do and whether this is a preview or final by .type
        
        protocol = extractSteps(FeatureStepsList);
        
        ProgressComment.setText("Processing data...");

        /*if(protocol.size() > 0){
        
            ProcessedImage = OriginalImage.duplicate();
            ImageProcessingProcessor ipp = new ImageProcessingProcessor(ProcessedImage, protocol);
            ipp.addPropertyChangeListener(this);    
            ipp.execute();
        
        }else{
            
            OriginalImage.deleteRoi();
            ProcessedImage = OriginalImage.duplicate();
            OriginalImage.restoreRoi();
            
            ImagePlus ProcessedShow = new ImagePlus("Processed");
            //ProcessedShow = UtilityMethods.makeThumbnail(ProcessedImage);
            ProcessedShow.setTitle(this.getName() + "_Processed");

            ProgressComment.setText("Processing complete...");
            ProcessedShow.show();
        }
        */
        /*if(ObjectStepsList.size() > 0){
            me.FolderDrawer.clear(); 
            me.ExploreDrawer.clear(); 

            notifyUpdatedImageListeners(ProcessedImage); 
        }*/
    }
/*
    private synchronized void executeObjectFinding() {

        this.PreProcessingGo.setEnabled(false);
        ProgressComment.setText("Finding objects...");
               
        ArrayList<ArrayList> protocol = new ArrayList<>();
        protocol = extractSteps(ObjectStepsList, OBJECTBLOCKS);

        System.out.println("PROFILING: From tab, '" + this.tabName + "' Found " + ObjectStepsList.size() + " object definitions to process.");
        me.start(ProcessedImage, protocol, true);
        
        this.exploreText.setForeground(new java.awt.Color(0, 0, 0));
        
        for(int i = 0; i < ObjectStepsList.size(); i++){
            if(((MicroFolder)me.FolderDrawer.get(i)).getAvailableData().size() > 0){
            executeExploring(i);
            ProgressComment.setText("Finding objects complete...");
            } else {
              ProgressComment.setText("No objects found...");  
            }
        } 
            VTEAProgressBar.setMaximum(255);
            VTEAProgressBar.setMinimum(0);
            VTEAProgressBar.setValue(0);
            ObjectGo.setEnabled(false);
        System.gc();
    }
*/
/*
    private void executeExploring(int i) {  
        System.out.println("PROFILING: Explorer setup for Object_" + i);
        System.out.println("PROFILING: Explorer getting " +  me.getFolderVolumes(i).size() + " volumes for Object_" + i);
        VTEAProgressBar.setMaximum(me.getFolderVolumes(i).size() + 100);
        me.addExplore(ProcessedImage,  "Object_" + (i+1), me.getFolderVolumes(i), me.getAvailableFolderData(i));
       
    }
    ;
*/
    static public ArrayList extractSteps(ArrayList sb_al) {

        ArrayList<ArrayList> Result = new ArrayList<ArrayList>();

        //if (blocktype == PROCESSBLOCKS) {

        FeatureStepBlockGUI ppsb;

        /*ListIterator<Object> litr = sb_al.listIterator();
        while (litr.hasNext()) {
            ppsb = (FeatureStepBlockGUI) litr.next();
            if (!(ppsb.Comment.getText()).equals("New Image")) {
                Result.add(ppsb.getVariables());
            }
        }*/
        

        FeatureStepBlockGUI osb;
        ListIterator<Object> litr = sb_al.listIterator();
        while (litr.hasNext()) {
            osb = (FeatureStepBlockGUI) litr.next();

            Result.add(osb.getVariables());
            System.out.println("OSB variables: " + Result);
        }

        return Result;
    }
    
    private int getBlockPosition() {
        int position;
        if (FeatureStepsList.isEmpty()) {
            position = 1;
        } else {
            position = FeatureStepsList.size() + 1;
        }
        return position;
    }
    
    public ArrayList getFeatureSteps() {
        return this.FeatureStepsList;
    }

    public ArrayList getProProcessingProtocol() {
        return extractSteps(FeatureStepsList);
    }
    
    public ArrayList getProcessingProtocolList() {
        return this.FeatureStepsList;
    }

    public void setProcessSteps(ArrayList FeatureStepsList) {
        FeatureStepsList.trimToSize();
        this.FeatureStepsList.addAll(FeatureStepsList);
        UpdatePositionFeature(0);
        this.RebuildPanelFeature();
    }
    
    private void deleteFeatureStep(int position) {

        //remove from FeatureStepsList
        FeatureStepsList.remove(position - 1);
        UpdatePositionFeature(position); 
        FeatureStepsList.trimToSize();
        
        FeatureStepsPanel.removeAll();
        FeatureStepsPanel.setLayout(FeatureLayout);
        
        if (FeatureStepsList.size() < 0) {
        } else {
            RebuildPanelFeature();
        }

        if (FeatureStepsList.size() < 4) {
            AddStep.setEnabled(true);
        }
        if(FeatureStepsList.isEmpty()){
            DeleteAllSteps.setEnabled(false);
        }

        FeatureStepsPanel.repaint();
        pack();

    }

}
